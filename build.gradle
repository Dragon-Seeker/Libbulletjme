plugins {
    id 'cpp'
    id 'java-library'
    id 'maven-publish'
}

ext {
    artifact = 'Libbulletjme'
    version = '3.0.11'
    baseName = "$artifact-$version"
}

sourceSets.main.java {
    srcDir 'src/main/java'
    srcDir 'src/main/native' // for IDE access (no Java there)
}

sourceSets.test.java {
    srcDir 'src/test/java'
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath
model {
    buildTypes {
        Debug
        Release
    }

    flavors {
        Sp // single-precision arithmetic
        Dp // double-precision arithmetic
    }

    platforms {
        Linux32 {
            architecture 'x86'
            operatingSystem 'linux'
        }
        Linux64 {
            architecture 'x86_64'
            operatingSystem 'linux'
        }
        Linux_ARM32 {
            architecture 'arm'
            operatingSystem 'linux'
        }
        Linux_ARM64 {
            architecture 'aarch64'
            operatingSystem 'linux'
        }
        MacOSX32 {
            architecture 'x86'
            operatingSystem 'osx'
        }
        MacOSX64 {
            architecture 'x86_64'
            operatingSystem 'osx'
        }
        Windows32 {
            architecture 'x86'
            operatingSystem 'windows'
        }
        Windows64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains { // prioritize C++ toolchains
        visualCpp(VisualCpp)
        gcc(Gcc)
        clang(Clang)
        gccArm(Gcc) {
            target('Linux_ARM64') {
                assembler.executable = 'aarch64-linux-gnu-as'
                cCompiler.executable = ' aarch64-linux-gnu-gcc'
                cppCompiler.executable = 'aarch64-linux-gnu-g++'
                linker.executable = 'aarch64-linux-gnu-g++'
                path '/usr/bin'
            }
        }
    }

    components {
        bulletjme(NativeLibrarySpec) {
            targetPlatform 'Linux32'
            targetPlatform 'Linux64'
            targetPlatform 'Linux_ARM64'
            targetPlatform 'MacOSX32'
            targetPlatform 'MacOSX64'
            targetPlatform 'Windows32'
            targetPlatform 'Windows64'

            sources.cpp.source {
                srcDir 'src/main/native/bullet3'
                srcDir 'src/main/native/glue'
                srcDir 'src/main/native/v-hacd/src'
                include '**/*.cpp'
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                // Decide whether to build the current platform:
                if (gradle.rootProject.hasProperty('travis')) {
                    // -Ptravis= specified on the command line
                    String travis = gradle.rootProject.ext.travis;
                    if (travis.equals('amd64')) {
                        buildable = !targetPlatform.name.startsWith('Linux_ARM')
                    } else if (travis.equals('arm64')) {
                        buildable = targetPlatform.name.startsWith('Linux_ARM')
                    } else if (travis.equals('osx')) {
                        buildable = targetPlatform.name.startsWith('MacOSX')
                    }
                } else {
                    // -Ptravis= not specified
                    buildable = !targetPlatform.name.startsWith('Linux_ARM')
                    //buildable = targetPlatform.name.equals('Linux64')
                }

                // Decide whether to build the current buildType:
                if (buildType == buildTypes.Debug) {
                    cppCompiler.define '_DEBUG'
                    //cppCompiler.define 'DEBUG_PERSISTENCY'
                    //buildable = false
                }

                // Decide whether to build the current flavor:
                if (flavor == flavors.Dp) {
                    cppCompiler.define 'BT_USE_DOUBLE_PRECISION'
                    //buildable = false
                }

                cppCompiler.define 'BT_NO_PROFILE'

                String q = targetPlatform.name + buildType.name + flavor.name
                if (toolChain in VisualCpp) {
                    cppCompiler.define 'WIN32'
                    cppCompiler.args '/EHsc' // synchronous exceptions only
                    cppCompiler.args "/I$javaHome/include"
                    cppCompiler.args "/I$javaHome/include/win32"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/public"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/LinearMath"
                    if (buildType == buildTypes.Debug) {
                        cppCompiler.args '/FS' // serialize PDB writes
                        cppCompiler.args '/MTd' // use LIBCMTD
                        cppCompiler.args '/Zi' // produce PDB file
                        linker.args '/DEBUG'
                        if (buildable) {
                            String pdbFile = 'build/libs/bulletjme/shared/'
                            pdbFile += targetPlatform.name + '/debug/'
                            pdbFile += flavor.name + '/bulletjme.pdb'

                            task "copyPdbToDist$q" (type: Copy, dependsOn:
                                 "bulletjme${q}SharedLibrary") {
                                from pdbFile
                                rename { String filename ->
                                    return q + '_' + filename
                                }
                                into 'dist'
                            }
                            jar.dependsOn("copyPdbToDist$q")
                        }
                    }

                } else { // toolChain in Clang or Gcc
                    cppCompiler.args '-I', "$javaHome/include"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/public"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args '-std=c++11'
                    if (buildType == buildTypes.Debug) {
                        cppCompiler.args '-O0', '-g3'
                    } else if (buildType == buildTypes.Release) {
                        cppCompiler.args '-O3'
                    }

                    String os = targetPlatform.operatingSystem.name
                    if (os == 'osx') {
                        cppCompiler.args '-I', "$javaHome/include/darwin"
                    } else if (os == 'linux') {
                        cppCompiler.args '-I', "$javaHome/include/linux"
                        cppCompiler.args '-fPIC'
                        cppCompiler.args '-fpermissive'
                        cppCompiler.args '-fvisibility=hidden'
                        linker.args '-fvisibility=hidden'
                    } else if (os == 'windows') { // not tested recently
                        cppCompiler.define 'WIN32'
                        cppCompiler.args '-I', "$javaHome/include/win32"
                        cppCompiler.args '-fpermissive'
                        cppCompiler.args '-static'
                        linker.args '-static'
                        linker.args '-Wl,--exclude-all-symbols'
                    } else {
                        buildable = false
                    }
                }

                if (buildable) {
                    println 'Build ' + q + ' using ' + toolChain
                    task "copyToDist$q" (type: Copy, dependsOn:
                         "bulletjme${q}SharedLibrary") {
                        from sharedLibraryFile
                        rename { String filename ->
                            return q + '_' + filename
                        }
                        into 'dist'
                    }
                    jar.dependsOn("copyToDist$q")
                } else {
                    //println 'Do not build ' + q
                }
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
}

repositories {
    jcenter()
}

compileJava.options.headerOutputDirectory = new File('src/main/native/glue')

test.dependsOn('assemble')
assemble.dependsOn('copyToDistJars')
task copyToDistJars (type: Copy) {
    dependsOn 'jar', 'javadocJar', 'sourcesJar'
    from 'build/libs'
    include '*.jar'
    into 'dist'
}

jar {
    archiveBaseName = project.ext.baseName
}

task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    classifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Create a JAR of javadoc.'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    classifier = 'sources'
    dependsOn 'classes'
    description 'Create a JAR of Java sourcecode.'
    from 'src/main/java'
}

build.dependsOn('pom')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    from "${buildDir}/publications/maven/pom-default.xml"
    into 'dist'
    rename '.*', baseName + '.pom'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId artifact
            from components.java
            groupId 'com.github.stephengold'
            pom {
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
            }
            version project.ext.version
        }
    }
}

// cleanup tasks
clean.dependsOn('cleanDist')
task cleanDist(type: Delete) {
    delete 'dist'
}
