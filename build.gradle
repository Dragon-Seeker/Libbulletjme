// Gradle build script for Maven artifacts and non-Android native libraries

plugins {
    id 'cpp-library'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

ext {
    group = 'com.github.stephengold'
    artifact = 'Libbulletjme'
    version = '12.6.0'
    baseName = "${artifact}-${version}"
    websiteUrl = 'https://github.com/stephengold/Libbulletjme'
}

description = 'a JNI interface for Bullet Physics and V-HACD'

sourceSets.main.java {
    srcDir 'src/main/java'
    srcDir 'src/main/native' // for IDE access (no Java there)
}

sourceSets.test.java {
    srcDir 'src/test/java'
}

// Regenerate all JNI header files before compiling any C++ source code.
tasks.withType(CppCompile) {
    dependsOn('classes', 'compileTestJava')
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath

library {
    buildTypes {
        Debug
        Release
    }

    flavors {
        Sp            // single-precision arithmetic
        SpMt          // single-precision arithmetic, multithreaded
        SpMtQuickprof // single-precision arithmetic, multithreaded, Quickprof profiling
        SpQuickprof   // single-precision arithmetic, Quickprof profiling
        Dp   // double-precision arithmetic
        DpMt // double-precision arithmetic, multithreaded
    }

    targetMachines = [ \
        machines.linux.x86, machines.linux.x86_64, \
        machines.macOS.x86, machines.macOS.x86_64, \
        machines.windows.x86, machines.windows.x86_64 ]

    linkage = [Linkage.SHARED]

    privateHeaders.from \
        file('src/main/native/bullet3'),
        file('src/main/native/bullet3/BulletDynamics/Featherstone'),
        file('src/main/native/bullet3/LinearMath'),
        file('src/main/native/v-hacd/inc'),
        file('src/main/native/v-hacd/public')

    source.from \
        file('src/main/native/bullet3'),
        file('src/main/native/glue'),
        file('src/main/native/v-hacd/src')
        
    components {
        // TODO
    }
}

description = 'JNI interface to Bullet Physics and V-HACD'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) { // compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.headerOutputDirectory = new File('src/main/native/glue')
}

test.dependsOn('assemble')
assemble.dependsOn('copyToDistJars')
task copyToDistJars (type: Copy) {
    dependsOn 'jar', 'javadocJar', 'signArchives', 'signMavenPublication', 'sourcesJar'
    from 'build/libs'
    include '*.jar', '*.jar.asc'
    into 'dist'
}

// custom tasks for creating source/javadoc JARs
jar {
    archiveBaseName = project.ext.baseName
}

task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of Java sourcecode.'
    from 'src/main/java'
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar, javadocJar, sourcesJar
}
javadoc.dependsOn('compileTestJava')

build.dependsOn('pom', 'pomAsc')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to dist.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into 'dist'
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
task('pomAsc', type: Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to dist.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into 'dist'
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = project.description
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Libbulletjme.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Libbulletjme.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version
        }
    }
}

// signing tasks

signing {
    sign configurations.archives
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signing.keyId') }
}

// cleanup tasks

clean.dependsOn('cleanCxx', 'cleanDist', 'cleanLogs')
task cleanCxx(type: Delete) {
    delete '.cxx'
}
task cleanDist(type: Delete) {
    delete 'dist'
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
