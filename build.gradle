plugins {
    id 'cpp'
    id 'java' // for IDE access
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath

model {
    buildTypes {
        Debug
        Release
    }

    flavors {
        Sp
        Dp
    }

    platforms {
        LinuxArm32 {
            architecture 'arm'
            operatingSystem 'linux'
        }
        LinuxArm64 {
            architecture 'aarch64'
            operatingSystem 'linux'
        }
        Linux32 {
            architecture 'x86'
            operatingSystem 'linux'
        }
        Linux64 {
            architecture 'x86_64'
            operatingSystem 'linux'
        }
        MacOSX32 {
            architecture 'x86'
            operatingSystem 'osx'
        }
        MacOSX64 {
            architecture 'x86_64'
            operatingSystem 'osx'
        }
        Windows32 {
            architecture 'x86'
            operatingSystem 'windows'
        }
        Windows64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    components {
        bulletjme(NativeLibrarySpec) {
            targetPlatform 'Linux32'
            targetPlatform 'Linux64'
            targetPlatform 'MacOSX32'
            targetPlatform 'MacOSX64'
            targetPlatform 'Windows32'
            targetPlatform 'Windows64'

            sources.cpp.source {
                srcDir 'src/native/bullet3'
                srcDir 'src/native/glue'
                include '**/*.cpp'
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                if (flavor == flavors.Dp) {
                    cppCompiler.define('BT_USE_DOUBLE_PRECISION')
                }
                cppCompiler.define('BT_NO_PROFILE')
                if (toolChain in VisualCpp) {
                    cppCompiler.define('WIN32')
                    cppCompiler.args('/EHsc');
                    cppCompiler.args("/I$javaHome/include")
                    cppCompiler.args("/I$javaHome/include/win32")
                    cppCompiler.args("/I$projectDir/src/native/bullet3")
                    if (buildType == buildTypes.Debug) {
                        buildable = false // TODO
                    }

                } else { // assume toolChain in Gcc
                    cppCompiler.args '-I', "$javaHome/include"
                    cppCompiler.args '-I', "$projectDir/src/native/bullet3"
                    if (buildType == buildTypes.Debug) {
                        cppCompiler.args '-O0', '-g3'
                        cppCompiler.define('_DEBUG')
                    } else if (buildType == buildTypes.Release) {
                        cppCompiler.args '-Ofast'
                    }
                    cppCompiler.args '-U_FORTIFY_SOURCE' // why?

                    String os = targetPlatform.operatingSystem.name
                    if (os == 'osx') {
                        cppCompiler.args '-I', "$javaHome/include/darwin"
                    } else if (os == 'linux') {
                        cppCompiler.args '-I', "$javaHome/include/linux"
                        cppCompiler.args '-fPIC'
                        cppCompiler.args '-fpermissive'
                        cppCompiler.args '-fvisibility=hidden'
                        linker.args '-fvisibility=hidden'
                    } else if (os == 'windows') { // not tested recently
                        cppCompiler.define('WIN32')
                        cppCompiler.args '-I', "$javaHome/include/win32"
                        cppCompiler.args '-fpermissive'
                        cppCompiler.args '-static'
                        linker.args '-static'
                        linker.args '-Wl,--exclude-all-symbols'
                    } else {
                        buildable = false
                    }
                }

                if (buildable) {
                    String q = targetPlatform.name + buildType.name + flavor.name
                    task "copyToDist$q" (type: Copy, dependsOn: "bulletjme${q}SharedLibrary") {
                        from sharedLibraryFile
                        rename { String filename ->
                            return q + '_' + filename
                        }
                        into 'dist'
                    }
                    jar.dependsOn("copyToDist$q")
                }
            }
        }
    }
}

// cleanup tasks
clean.dependsOn('cleanDist')
task cleanDist(type: Delete) {
    delete 'dist'
}

sourceSets.main.java { // for IDE access
    srcDir 'src/native/bullet3'
    srcDir 'src/native/glue'
}
